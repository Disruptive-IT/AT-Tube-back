generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Roles {
  id_rol   Int   @id 
  name     String
  status   Boolean  @default(true)
  create_at DateTime @default(now())

  Users Users[]  // Relación inversa con Users
}



model DocumentType {
  id_document_type Int   @id 
  name             String
  description      String

  Users         Users[]  // Relación inversa con Users
}

model City {
  id_city        Int       @id 
  name           String
  id_department  Int   // Clave foránea a Department

  Department     Department @relation(fields: [id_department], references: [id_department])  // Relación con Department
  Users       Users[]  // Relación inversa con Users
}

model Country {  // Cambiar a mayúscula
  id_country      Int       @id 
  name            String

  Department    Department[] 
  Users      Users[]  // Relación inversa con Users
}


model Department {
  id_department  Int     @id 
  name           String
  id_country     Int      // Clave foránea a Country

  Country        Country @relation(fields: [id_country], references: [id_country])  // Relación con Department
  Users      Users[]  // Relación inversa con Users
  City          City[]  // Relación inversa con City
}

model Users {
  id_users        String       @id @default(uuid())
  avatar          String?
  document_type   Int?      // Clave foránea a DocumentType
  document        String?
  name            String
  id_country      Int?   
  id_department   Int?      // Clave foránea a Department
  id_city         Int?      // Clave foránea a City
  address         String?
  phone           String?
  email           String    @unique
  password        String?
  id_rol          Int    // Clave foránea a Roles
  status          Boolean   @default(true)
  create_at       DateTime  @default(now())
  update_at       DateTime  @updatedAt

  country         Country?      @relation(fields: [id_country], references: [id_country]) //relación con Country
  department      Department?   @relation(fields: [id_department], references: [id_department]) // relación con Department
  city            City?         @relation(fields: [id_city], references: [id_city]) // relación con City
  role            Roles        @relation(fields: [id_rol], references: [id_rol]) // relación con Roles
  documentType    DocumentType? @relation(fields: [document_type], references: [id_document_type]) // relación con DocumentType
  Sales           Sales[]      // Relación inversa con Sales
  Templates       Templates[] // Relación inversa con Templates
}

model Sales {
  id_sales           String    @id @default(uuid())         // Usar UUID para claves primarias
  id_user            String                                 // Clave foránea a Users

  total_price        Int?
  finalize_at        DateTime?
  cotized_at         DateTime?
  purchased_at       DateTime?
  send_at            DateTime?
  delivered_at       DateTime?
  canceled_at        DateTime?
  canceled_reason    String?
  status             Int
  id_orden_pago      String?
  id_pago_reslizado  String?

  create_at          DateTime  @default(now())
  update_at          DateTime  @updatedAt

  SalesStatus        SalesStatus @relation(fields:[status], references: [id_status])
  usuario            Users  @relation(fields: [id_user], references: [id_users])  // Relación con Users
  SalesTemplate      SalesTemplate[]                 // Relación uno a muchos con SalesTemplate
}

model SalesStatus{
  id_status       Int    @id          // Usar UUID para claves primarias
  name            String
  description     String

  Sales           Sales[]      // Relación uno a muchos con Sales
}

model SalesTemplate {
  id_sales        String     // Campo que hace referencia a Sales
  id_template     String     // Campo que hace referencia a Templates
  box_amount      Int
  box_price       Int
  bottle_amount   Int
  bottle_price    Int
  decorator_type  String?
  decorator_price Int?
  Sales           Sales      @relation(fields: [id_sales], references: [id_sales])  // Relación con Sales
  create_at       DateTime   @default(now())
  template        Templates  @relation(fields: [id_template], references: [id_template])  // Relación con Templates

  @@id([id_sales, id_template])  // Llave compuesta (id_sales + id_template)
}



model Templates {
  id_template     String    @id @default(uuid())         // Usar UUID para claves primarias
  id_users        String
  design          Json
  decorator       String?
  status          Boolean   @default(true)
  create_at       DateTime  @default(now())
  update_at       DateTime  @updatedAt
  
  Users           Users       @relation(fields: [id_users], references: [id_users])
  SalesTemplate   SalesTemplate[]
}